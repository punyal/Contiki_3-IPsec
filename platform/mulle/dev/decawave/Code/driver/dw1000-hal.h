#ifndef DW1000_HAL_H
#define DW1000_HAL_H

/**
 * \file dw1000-hal.h
 * \author Kim Albertsson
 * \date 2014-Oct-16
 *
 * \brief Hardware abstraction layer for the Decawave dw1000 driver. Each 
 * platform has its own implementation of this interface where implementation 
 * details can be found.
 * 
 * \details Areas handled:
 *  - Interrupts (currently used to implement asyncronous communication).
 *  Interrupts are generated by the dw1000 when a masked event occurs, this 
 *  can be caught by the host processor if interrupts are enabled. The HAL 
 *  module interrupt part handles the host side of the dw1000 interrupt chain.
 *
 * \todo Refactor the SPI module to the HAL module. The SPI part was developed 
 * before the HAL module, it does however logically belong to the HAL module
 * and should thus be refactored in under it. It would require renaming quite
 * a lot of function calls in dw1000-base, but this should be all.
 * 
 */

/**
 * \brief Run by the driver at initialisation. Set everything up so that the 
 * HAL can be used.
 */
void dw_hal_init();

/**
 * \brief Enables interrupts on the host device.
 */
void dw_hal_enable_interrupt();

/**
 * \brief Disables interrupts on the host device.
 */
void dw_hal_disable_interrupt();

/**
 * \brief Disables interrupts on the host device.
 * 
 * \todo Currently there is only one interrupt pin. To future-proof, this 
 * function should be expanded to include an enum argument with a single 
 * value: DW_MAIN_INTERRUPT.
 */
void dw_hal_clear_pending_interrupt();

/**
 * \brief Generalisation for interrupt vector.
 * \todo Should be private to platform-hal?
 */
void (* dw_hal_interrupt_handler)();
/**
 * \brief Host callback when interrupt detected.
 * \todo Should be private to platform-hal?
 */
void (* dw_hal_interrupt_callback)();

#endif